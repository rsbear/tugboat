{"version":3,"sources":["../src/input.ts","../src/kv.ts"],"names":[],"mappings":"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","file":"mod.js","sourcesContent":["// pkgs/core/input.ts\nexport type InputState = {\n  raw: string;\n};\n\nexport type ParsedInput = {\n  raw: string;\n  alias: string; // First word (e.g., \"clone\" from \"clone my-repo\")\n  query: string; // Everything after alias (e.g., \"my-repo\" from \"clone my-repo\")\n};\n\nexport type SubmitHandler = (input: ParsedInput) => Promise<void> | void;\n\nclass InputStore {\n  private state: InputState = { raw: \"\" };\n  private listeners = new Set<(s: InputState) => void>();\n  private submitHandler: SubmitHandler | null = null;\n  private isHiddenState: boolean = false;\n\n  get() {\n    return this.state;\n  }\n\n  set(raw: string) {\n    this.state = { raw };\n    this.listeners.forEach((fn) => fn(this.state));\n  }\n\n  subscribe(fn: (s: InputState) => void) {\n    this.listeners.add(fn);\n    fn(this.state);\n    return () => this.listeners.delete(fn);\n  }\n\n  // Register submit handler\n  onSubmit(handler: SubmitHandler) {\n    this.submitHandler = handler;\n    // Return unregister function\n    return () => {\n      if (this.submitHandler === handler) {\n        this.submitHandler = null;\n      }\n    };\n  }\n\n  // Parse and execute submit handler\n  async submit() {\n    if (!this.submitHandler) return;\n\n    const parsed = this.parse(this.state.raw);\n    try {\n      await this.submitHandler(parsed);\n    } catch (error) {\n      console.error(\"Submit handler error:\", error);\n      throw error;\n    }\n  }\n\n  // Parse raw input into structured data\n  private parse(raw: string): ParsedInput {\n    const trimmed = raw.trim();\n    const parts = trimmed.split(/\\s+/);\n    const alias = parts[0] || \"\";\n    const query = parts.slice(1).join(\" \");\n\n    return { raw: trimmed, alias, query };\n  }\n\n  /**\n   * Hide the host input block\n   */\n  hide(bool: boolean): void {\n    this.isHiddenState = bool;\n  }\n\n  /**\n   * Check if the host input block is hidden\n   */\n  isHidden(): boolean {\n    return this.isHiddenState;\n  }\n}\n\nexport const input = new InputStore();\n","// @ts-ignore\nconst { invoke } = window.__TAURI__.core;\n\nexport interface KvItem<T> {\n  value: T;\n  metadata: {\n    key: string[];\n    created_at: number;\n    updated_at: number;\n  };\n}\n\nexport type KvOkList<T> = {\n  _tag: \"Ok\";\n  _type: \"List\";\n  values: KvItem<T>[];\n  metadata: KvItem<T>[\"metadata\"];\n};\n\nexport type KvOkItem<T> = {\n  _tag: \"Ok\";\n  _type: \"Item\";\n  value: T;\n  metadata: KvItem<T>[\"metadata\"];\n};\n\nexport type KvOkString = {\n  _tag: \"Ok\";\n  _type: \"String\";\n  value: string;\n};\n\nexport type KvNone = { _tag: \"None\" };\nexport type KvError = { _tag: \"Error\"; error: string };\n\nexport type KvMsg<T> =\n  | KvOkList<T>\n  | KvOkItem<T>\n  | KvOkString\n  | KvNone\n  | KvError;\n\nclass KvValidator<T, State extends string = \"initial\"> {\n  constructor(public msg: KvMsg<T>) {}\n\n  isOk(): this is KvValidator<\n    T,\n    \"ok_list\" | \"ok_item\" | \"ok_string\"\n  > {\n    return this.msg._tag === \"Ok\";\n  }\n\n  isList(\n    this: KvValidator<T, \"ok_list\" | \"ok_item\" | \"ok_string\">,\n  ): this is KvValidator<T, \"ok_list\"> {\n    return this.msg._tag === \"Ok\" && this.msg._type === \"List\";\n  }\n\n  isItem(\n    this: KvValidator<T, \"ok_list\" | \"ok_item\" | \"ok_string\">,\n  ): this is KvValidator<T, \"ok_item\"> {\n    return this.msg._tag === \"Ok\" && this.msg._type === \"Item\";\n  }\n\n  isString(\n    this: KvValidator<T, \"ok_list\" | \"ok_item\" | \"ok_string\">,\n  ): this is KvValidator<T, \"ok_string\"> {\n    return this.msg._tag === \"Ok\" && this.msg._type === \"String\";\n  }\n\n  isError(): this is KvValidator<T, \"error\"> {\n    return this.msg._tag === \"Error\";\n  }\n\n  isNone(): this is KvValidator<T, \"none\"> {\n    return this.msg._tag === \"None\";\n  }\n\n  values(this: KvValidator<T, \"ok_list\">): KvItem<T>[] {\n    return (this.msg as KvOkList<T>).values;\n  }\n\n  value(\n    this: KvValidator<T, \"ok_item\" | \"ok_string\">,\n  ): T | string {\n    return (this.msg as KvOkItem<T> | KvOkString).value;\n  }\n\n  metadata(\n    this: KvValidator<T, \"ok_list\" | \"ok_item\">,\n  ): KvItem<T>[\"metadata\"] {\n    return (this.msg as KvOkList<T> | KvOkItem<T>).metadata;\n  }\n\n  error(this: KvValidator<T, \"error\">): string {\n    return (this.msg as KvError).error;\n  }\n}\n\nexport interface KV<T> {\n  list(key: string[]): Promise<KvValidator<T>>;\n  get(key: string[]): Promise<KvValidator<T>>;\n  set(key: string[], value: T): Promise<KvValidator<T>>;\n  delete(key: string[]): Promise<KvValidator<void>>;\n}\n\nexport function kv<T>(baseKey: string): KV<T> {\n  return {\n    list: (kvKey: string[]) => kvList<T>(baseKey, kvKey),\n    get: (kvKey: string[]) => kvGet<T>(baseKey, kvKey),\n    set: (kvKey: string[], value: T) => kvSet<T>(baseKey, kvKey, value),\n    delete: (kvKey: string[]) => kvDelete<undefined>(baseKey, kvKey),\n  };\n}\n\nasync function kvList<T>(\n  baseKey: string,\n  key: string[],\n): Promise<KvValidator<T>> {\n  try {\n    const items = await invoke<KvItem<T>[]>(\"kv_list\", {\n      prefix: [baseKey, ...key],\n    });\n\n    if (!items.length) {\n      return new KvValidator({ _tag: \"None\" });\n    }\n\n    return new KvValidator({\n      _tag: \"Ok\",\n      _type: \"List\",\n      values: items,\n      metadata: items[0].metadata,\n    });\n  } catch (err) {\n    const errorMsg = err instanceof Error\n      ? err.message\n      : \"Error listing values\";\n    return new KvValidator({ _tag: \"Error\", error: errorMsg });\n  }\n}\n\nasync function kvGet<T>(\n  baseKey: string,\n  key: string[],\n): Promise<KvValidator<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    const result = await invoke<KvItem<T>>(\"kv_get\", {\n      key: fullKey,\n    });\n\n    if (result === null) {\n      return new KvValidator({ _tag: \"None\" });\n    }\n\n    return new KvValidator({\n      _tag: \"Ok\",\n      _type: \"Item\",\n      value: result.value,\n      metadata: result.metadata,\n    });\n  } catch (err) {\n    const errorMsg = err instanceof Error ? err.message : \"Error getting value\";\n    return new KvValidator({\n      _tag: \"Error\",\n      error: errorMsg,\n    });\n  }\n}\n\nasync function kvSet<T>(\n  baseKey: string,\n  key: string[],\n  value: T,\n): Promise<KvValidator<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    await invoke<void>(\"kv_set\", { key: fullKey, value });\n\n    return new KvValidator<T>({\n      _tag: \"Ok\",\n      _type: \"String\",\n      value: `Set ${fullKey.join(\"/\")}`,\n    } as any);\n  } catch (err) {\n    const errorMsg = err instanceof Error ? err.message : \"Error setting value\";\n    return new KvValidator({ _tag: \"Error\", error: errorMsg });\n  }\n}\n\nasync function kvDelete<T>(\n  baseKey: string,\n  key: string[],\n): Promise<KvValidator<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    await invoke<void>(\"kv_delete\", { key: fullKey });\n\n    return new KvValidator<T>({\n      _tag: \"Ok\",\n      _type: \"String\",\n      value: `Deleted ${fullKey.join(\"/\")}`,\n    } as any);\n  } catch (err) {\n    const errorMsg = err instanceof Error\n      ? err.message\n      : \"Error deleting value\";\n    return new KvValidator({\n      _tag: \"Error\",\n      error: errorMsg,\n    });\n  }\n}\n"]}