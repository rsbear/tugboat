{"version":3,"sources":["../src/input.ts","../src/kv.ts"],"names":[],"mappings":"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","file":"mod.js","sourcesContent":["// pkgs/core/input.ts\nexport type InputState = {\n  raw: string;\n};\n\nclass InputStore {\n  private state: InputState = { raw: \"\" };\n  private listeners = new Set<(s: InputState) => void>();\n\n  get() {\n    return this.state;\n  }\n\n  set(raw: string) {\n    this.state = { raw };\n    this.listeners.forEach((fn) => fn(this.state));\n  }\n\n  subscribe(fn: (s: InputState) => void) {\n    this.listeners.add(fn);\n    fn(this.state);\n    return () => this.listeners.delete(fn);\n  }\n}\n\nexport const input = new InputStore();\n","// pkgs/core/src/kv.ts\n// import { invoke } from \"@tauri-apps/api/core\";\n\n// @ts-ignore\nconst { invoke } = window.__TAURI__.core;\n\nexport interface KvItem<T> {\n  value: T;\n  metadata: {\n    key: string[];\n    created_at: number;\n    updated_at: number;\n  };\n}\n\nexport type KvMsg<T> =\n  | { _tag: \"None\"; result: null }\n  | { _tag: \"Error\"; result: string }\n  | { _tag: \"Ok\"; _type: \"List\"; result: KvItem<T>[] }\n  | { _tag: \"Ok\"; _type: \"Item\"; result: KvItem<T> }\n  | { _tag: \"Ok\"; _type: \"String\"; result: string };\n\nexport interface KvTable<T> {\n  list(): Promise<KvMsg<T>>;\n  get(key: string[]): Promise<KvMsg<T>>;\n  set(key: string[], value: T): Promise<KvMsg<T>>;\n  delete(key: string[]): Promise<KvMsg<void>>;\n}\n\nexport function kvTable<T>(baseKey: string): KvTable<T> {\n  return {\n    list: () => kvList<T>(baseKey),\n    get: (kvKey: string[]) => kvGet<T>(baseKey, kvKey),\n    set: (kvKey: string[], value: T) => kvSet<T>(baseKey, kvKey, value),\n    delete: (kvKey: string[]) => kvDelete<undefined>(baseKey, kvKey),\n  };\n}\n\nasync function kvList<T>(baseKey: string): Promise<KvMsg<T>> {\n  try {\n    const items = await invoke<KvItem<T>[]>(\"kv_list\", {\n      prefix: [baseKey],\n    });\n\n    if (!items.length) {\n      return { _tag: \"None\", result: null };\n    }\n\n    return { _tag: \"Ok\", _type: \"List\", result: items };\n  } catch (err) {\n    const errorMsg = err instanceof Error\n      ? err.message\n      : \"Error listing values\";\n    return { _tag: \"Error\", result: errorMsg };\n  }\n}\n\nasync function kvGet<T>(baseKey: string, key: string[]): Promise<KvMsg<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    const result = await invoke<KvItem<T>>(\"kv_get\", {\n      key: fullKey,\n    });\n\n    if (result === null) {\n      return { _tag: \"None\", result: null };\n    }\n\n    return { _tag: \"Ok\", _type: \"Item\", result };\n  } catch (err) {\n    const errorMsg = err instanceof Error ? err.message : \"Error getting value\";\n    return { _tag: \"Error\", result: errorMsg };\n  }\n}\n\nasync function kvSet<T>(\n  baseKey: string,\n  key: string[],\n  value: T,\n): Promise<KvMsg<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    await invoke<void>(\"kv_set\", { key: fullKey, value });\n\n    return { _tag: \"Ok\", _type: \"String\", result: `Set ${fullKey}` };\n  } catch (err) {\n    const errorMsg = err instanceof Error ? err.message : \"Error getting value\";\n    return { _tag: \"Error\", result: errorMsg };\n  }\n}\n\nasync function kvDelete<T>(baseKey: string, key: string[]): Promise<KvMsg<T>> {\n  try {\n    const fullKey = [baseKey, ...key];\n    await invoke<KvItem<T>>(\"kv_delete\", { key: fullKey });\n\n    return { _tag: \"Ok\", _type: \"String\", result: `Deleted ${fullKey}` };\n  } catch (err) {\n    const errorMsg = err instanceof Error\n      ? err.message\n      : \"Error deleting value\";\n    return { _tag: \"Error\", result: errorMsg };\n  }\n}\n"]}